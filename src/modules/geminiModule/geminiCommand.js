const logger = require("../../utils/logger");
const { getFileBuffer } = require("../../utils/getFileBuffer");
const { processAIResponse, updateUserSystemInstruction } = require("./processGeminiModule");
const config = require("./../../config/options.json");
/**
 * Processa um comando enviado ao Gemini, interpretando texto e imagem (se houver),
 * e envia a resposta gerada pela IA de volta ao remetente.
 * Inclui feedback visual ("digitando...") e rodap√© interativo.
 *
 * @async
 * @function processGeminiCommand
 * @param {object} client - Inst√¢ncia do cliente (ex: Baileys).
 * @param {object} info - Informa√ß√µes da mensagem recebida.
 * @param {string} sender - Identificador do remetente da mensagem.
 * @param {string} from - ID da origem da mensagem (grupo ou privado).
 * @param {string} text - Texto enviado pelo usu√°rio para ser processado.
 * @param {number} expirationMessage - Tempo para expira√ß√£o da mensagem (modo ef√™mero).
 * @returns {Promise<void>}
 */
async function processGeminiCommand(client, info, sender, from, text, expirationMessage) {
  // --- Input Validation ---
  if (!client || !info) {
    logger.error("[ processGeminiCommand ] ‚ùå Par√¢metros essenciais ausentes (client ou info)");
    return;
  }

  const trimmedText = text ? text.trim() : "";
  if (!trimmedText) {
    logger.warn(`[ processGeminiCommand ] ‚ö†Ô∏è Comando Cat recebido sem texto do usu√°rio ${sender} em ${from}`);
    try {
      // Improved message explaining usage, image support, and setprompt
      const helpMessage = `ü§î Opa! Parece que faltou o texto para o comando \`!cat\`.

Voc√™ precisa me dizer o que fazer! Envie sua pergunta ou instru√ß√£o *junto* com o comando.

*Exemplos de Uso:*
*   üìù *Texto:* \`!cat Qual a capital do Brasil?\`
*   üñºÔ∏è *Imagem:* Responda a uma foto de um cachorro com a mensagem: \`!cat Que ra√ßa √© essa?\` (Sim, ele analisa imagens!)

‚ú® *Dica: Personalize a IA!* ‚ú®
Use o comando \`!setIA\` para definir como a IA deve se comportar *nas suas conversas*.
*   üß† *Exemplo:* \`!setIA\` Aja como um chef de cozinha italiano e me d√™ receitas simples\`
*   üßπ _Importante:_ Usar o \`!setIA\` limpa seu hist√≥rico de conversa anterior com a IA para aplicar a nova instru√ß√£o.`;

      await client.sendMessage(from, { text: helpMessage }, { quoted: info, ephemeralExpiration: expirationMessage });
    } catch (sendError) {
      logger.error(`[ processGeminiCommand ] ‚ùå Falha ao enviar mensagem de ajuda (texto vazio) para ${from}:`, sendError);
    }
    return; // Stop processing since there's no text
  }

  // --- Start Processing ---
  logger.info(`[ processGeminiCommand ] ‚è≥ Processando comando Gemini de ${sender} em ${from}. Texto: "${trimmedText}"`);
  let imageBuffer = null;

  try {
    await Promise.all([client.sendMessage(from, { react: { text: "‚è≥", key: info.key } }), client.sendPresenceUpdate("composing", from)]);

    // --- Media Handling ---
    const mediaTypes = [info.message?.imageMessage, info.message?.extendedTextMessage?.contextInfo?.quotedMessage?.imageMessage, info.message?.extendedTextMessage?.contextInfo?.quotedMessage?.viewOnceMessage?.message?.imageMessage];
    const encmedia = mediaTypes.find(media => media);

    if (encmedia) {
      logger.info(`[ processGeminiCommand ] üñºÔ∏è Encontrada m√≠dia de imagem para processar com o texto.`);
      try {
        imageBuffer = await getFileBuffer(encmedia, "image");
        if (!imageBuffer) {
          logger.warn("[ processGeminiCommand ] ‚ö†Ô∏è N√£o foi poss√≠vel obter o buffer da imagem, continuando apenas com texto.");
        }
      } catch (bufferError) {
        logger.error("[ processGeminiCommand ] ‚ùå Erro ao obter buffer da imagem:", bufferError);
      }
    }

    // --- AI Interaction ---
    const prompt = { parts: [{ text: trimmedText }] };

    const aiResponse = await processAIResponse(prompt, imageBuffer, {}, sender);

    // --- Response Handling ---
    if (!aiResponse.success) {
      logger.error("[ processGeminiCommand ] ‚ùå Erro retornado por processAIResponse:", aiResponse.error);
      await client.sendMessage(from, { react: { text: "‚ö†Ô∏è", key: info.key } }); // Use warning reaction for AI-specific errors

      await client
        .sendMessage(
          config.owner.number,
          {
            text: `*‚ö†Ô∏è Erro na IA (Comando Gemini):*\n\n*De:* ${sender}\n*Chat:* ${from}\n*Texto:* ${trimmedText}\n*Erro:* \n${JSON.stringify(aiResponse.error)}`,
          },
          { quoted: info, ephemeralExpiration: expirationMessage }
        )
        .catch(e => logger.error("[ processGeminiCommand ] ‚ùå Falha ao notificar owner sobre erro da IA:", e));

      await client
        .sendMessage(
          from,
          {
            text: `*‚ö†Ô∏è Tive um problema ao processar sua solicita√ß√£o com a intelig√™ncia artificial.*\n\n_Se o problema persistir, tente novamente mais tarde ou contate o suporte._\n\n*Detalhe t√©cnico (se ajudar):* ${aiResponse.error?.message || "Erro desconhecido na IA"}`,
          },
          { quoted: info, ephemeralExpiration: expirationMessage }
        )
        .catch(e => logger.error("[ processGeminiCommand ] ‚ùå Falha ao enviar msg de erro da IA para o usu√°rio:", e));

      return;
    }

    // --- Success ---
    logger.info(`[ processGeminiCommand ] ‚úÖ Resposta da IA recebida com sucesso para ${sender} em ${from}`);

    const responseText = aiResponse.data;

    await client.sendMessage(from, { react: { text: "üêà‚Äç‚¨õ", key: info.key } });
    await client.sendMessage(
      from,
      { text: responseText, mentions: [sender] },
      {
        quoted: info,
        ephemeralExpiration: expirationMessage,
      }
    );

    logger.info(`[ processGeminiCommand ] ‚úÖ Resposta da IA enviada com sucesso para ${from}`);
  } catch (error) {
    logger.error("[ processGeminiCommand ] ‚ùå Erro GERAL ao processar o comando Gemini:", error);

    try {
      await client.sendMessage(from, { react: { text: "‚ùå", key: info.key } });

      await client
        .sendMessage(
          config.owner.number,
          {
            text: `*‚ùå Erro GERAL (Comando Gemini):*\n\n*De:* ${sender}\n*Chat:* ${from}\n*Texto:* ${trimmedText}\n*Erro:* \n${error.message}\n*Stack:* ${error.stack}`,
          },
          { quoted: info, ephemeralExpiration: expirationMessage }
        )
        .catch(e => logger.error("[ processGeminiCommand ] ‚ùå Falha ao notificar owner sobre erro GERAL:", e));

      await client
        .sendMessage(
          from,
          {
            text: `*‚ùå Ops! Algo deu errado ao processar seu comando.*\n\n_J√° notifiquei o desenvolvedor sobre isso. Por favor, tente novamente mais tarde._\n\n*Se precisar de ajuda imediata, fale com:* ${config.owner.whatsapp}`,
          },
          { quoted: info, ephemeralExpiration: expirationMessage }
        )
        .catch(e => logger.error("[ processGeminiCommand ] ‚ùå Falha ao enviar msg de erro GERAL para o usu√°rio:", e));
    } catch (notifyError) {
      logger.error("[ processGeminiCommand ] ‚ùå Falha CR√çTICA ao tentar notificar sobre erro GERAL:", notifyError);
    }
  } finally {
    // --- Cleanup ---
    try {
      await client.sendPresenceUpdate("paused", from);
    } catch (presenceError) {
      logger.warn("[ processGeminiCommand ] ‚ö†Ô∏è Falha ao resetar presence update para 'paused':", presenceError);
    }
  }
}
/**
 * Processa o comando para definir a instru√ß√£o do sistema do Gemini para um usu√°rio.
 * Limpa o hist√≥rico de chat do usu√°rio para aplicar a nova instru√ß√£o.
 *
 * @async
 * @function processSetPromptCommand
 * @param {object} client - Inst√¢ncia do cliente (ex: Baileys).
 * @param {object} info - Informa√ß√µes da mensagem recebida.
 * @param {string} sender - Identificador do remetente da mensagem.
 * @param {string} from - ID da origem da mensagem (grupo ou privado).
 * @param {string[]} args - Argumentos passados para o comando (a nova instru√ß√£o).
 * @returns {Promise<void>}
 */
async function processSetPromptCommand(client, info, sender, from, args) {
  const newInstruction = args.join(" ").trim();

  // --- Input Validation ---
  if (!newInstruction) {
    logger.warn(`[ processSetPromptCommand ] ‚ö†Ô∏è Tentativa de definir instru√ß√£o vazia por ${sender} em ${from}`);
    try {
      await client.sendMessage(from, { react: { text: "ü§î", key: info.key } });
      await client.sendMessage(from, { text: "‚ö†Ô∏è Voc√™ precisa fornecer o texto da nova instru√ß√£o ap√≥s o comando.\n\n*Exemplo:* `!setprompt Seja um assistente pirata divertido`" }, { quoted: info });
    } catch (sendError) {
      logger.error(`[ processSetPromptCommand ] ‚ùå Falha ao enviar mensagem de instru√ß√£o vazia para ${from}:`, sendError);
    }
    return;
  }

  if (newInstruction.length > 500) {
    // Keep the length check
    logger.warn(`[ processSetPromptCommand ] ‚ö†Ô∏è Tentativa de definir instru√ß√£o muito longa por ${sender} (Length: ${newInstruction.length})`);
    try {
      await client.sendMessage(from, { react: { text: "üìè", key: info.key } });
      await client.sendMessage(from, { text: `*‚ö†Ô∏è A instru√ß√£o √© muito longa (${newInstruction.length} caracteres). O limite √© de 500 caracteres.*` }, { quoted: info });
    } catch (sendError) {
      logger.error(`[ processSetPromptCommand ] ‚ùå Falha ao enviar mensagem de instru√ß√£o longa para ${from}:`, sendError);
    }
    return;
  }

  // --- Start Processing ---
  logger.info(`[ processSetPromptCommand ] ‚è≥ Processando !setprompt de ${sender} em ${from}. Nova instru√ß√£o: "${newInstruction}"`);
  try {
    // --- Update Instruction and Clear History ---
    const updateResult = await updateUserSystemInstruction(sender, newInstruction);

    // --- Handle Result ---
    if (updateResult.success) {
      logger.info(`[ processSetPromptCommand ] ‚úÖ Instru√ß√£o do sistema atualizada e hist√≥rico limpo para ${sender}`);
      await client.sendMessage(from, { react: { text: "‚úÖ", key: info.key } });

      // Construct the detailed success message
      const successMessage = `‚ú® *Instru√ß√£o do Sistema Atualizada!* ‚ú®\n\n` + `üß† Sua nova instru√ß√£o para a IA foi definida como:\n` + `\`\`\`\n${newInstruction}\n\`\`\`\n\n` + `üßπ *Importante:* Para que a IA siga esta nova instru√ß√£o corretamente, seu hist√≥rico de conversa anterior com ela foi limpo.\n\n` + `üöÄ Tudo pronto! Voc√™ j√° pode usar o comando \`!gemini\` (ou \`!cat\`) novamente. A IA responder√° seguindo a nova instru√ß√£o que voc√™ definiu.`;

      await client.sendMessage(from, { text: successMessage }, { quoted: info });
    } else {
      // Handle failure from updateUserSystemInstruction
      logger.error(`[ processSetPromptCommand ] ‚ùå Falha ao atualizar instru√ß√£o para ${sender}: ${updateResult.error}`);
      await client.sendMessage(from, { react: { text: "‚ùå", key: info.key } });
      await client.sendMessage(from, { text: "‚ùå Ocorreu um erro ao tentar atualizar sua instru√ß√£o. Parece que houve um problema interno. O desenvolvedor j√° foi notificado." }, { quoted: info });
      // Notify owner (keep this)
      await client.sendMessage(config.owner.number, { text: `*‚ùå Erro ao atualizar instru√ß√£o (SetPrompt):*\n\n*Usu√°rio:* ${sender}\n*Chat:* ${from}\n*Instru√ß√£o Tentada:* ${newInstruction}\n*Erro:* ${updateResult.error}` });
    }
  } catch (error) {
    // Handle unexpected errors during the process
    logger.error(`[ processSetPromptCommand ] üí• Erro INESPERADO ao processar !setprompt para ${sender}:`, error);
    try {
      // Try to notify user and owner about the unexpected error
      await client.sendMessage(from, { react: { text: "‚ùå", key: info.key } });
      await client.sendMessage(from, { text: "‚ùå Ops! Ocorreu um erro inesperado ao processar sua solicita√ß√£o. O desenvolvedor foi notificado para investigar." }, { quoted: info });
      // Notify owner with stack trace (keep this)
      await client.sendMessage(config.owner.number, { text: `*üí• Erro INESPERADO (SetPrompt):*\n\n*Usu√°rio:* ${sender}\n*Chat:* ${from}\n*Instru√ß√£o Tentada:* ${newInstruction}\n*Erro:* ${error.message}\n*Stack:* ${error.stack}` });
    } catch (notifyError) {
      logger.error("[ processSetPromptCommand ] üÜò Falha CR√çTICA ao tentar notificar sobre erro inesperado:", notifyError);
    }
  }
}
module.exports = {
  processGeminiCommand,
  processSetPromptCommand,
};
