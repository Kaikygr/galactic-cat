const logger = require("../../utils/logger");
const { getFileBuffer } = require("../../utils/functions");
const { processAIResponse, updateUserSystemInstruction } = require("./processGeminiModule");
const config = require("./../../config/options.json");
let response = null;

/**
 * Processa um comando enviado ao Gemini, interpretando texto e imagem (se houver),
 * e envia a resposta gerada pela IA de volta ao remetente.
 *
 * @async
 * @function processGeminiCommand
 * @param {object} client - Inst√¢ncia do cliente (ex: Baileys).
 * @param {object} info - Informa√ß√µes da mensagem recebida.
 * @param {string} sender - Identificador do remetente da mensagem.
 * @param {string} from - ID da origem da mensagem (grupo ou privado).
 * @param {string} text - Texto enviado pelo usu√°rio para ser processado.
 * @param {number} expirationMessage - Tempo para expira√ß√£o da mensagem (modo ef√™mero).
 * @returns {Promise<void>}
 */
async function processGeminiCommand(client, info, sender, from, text, expirationMessage) {
  if (!client || !info || !text) {
    logger.error("[ processGeminiCommand ] ‚ùå Par√¢metros obrigat√≥rios ausentes (client, info ou text)");
    return;
  }

  try {
    const mediaTypes = {
      image: [info.message?.imageMessage, info.message?.extendedTextMessage?.contextInfo?.quotedMessage?.imageMessage, info.message?.extendedTextMessage?.contextInfo?.quotedMessage?.viewOnceMessage?.message?.imageMessage],
    };

    const encmedia = findFirstValidMedia(mediaTypes);

    const prompt = await buildPrompt(encmedia, text);

    const imageBuffer = encmedia ? await getFileBuffer(encmedia, "image") : null;

    const aiResponse = await processAIResponse(prompt, imageBuffer, {}, sender);

    if (!aiResponse.success) {
      logger.error("[ processGeminiCommand ] ‚ùå Erro retornado por processAIResponse:", aiResponse.error);
      await client.sendMessage(from, { react: { text: "‚ùå", key: info.key } });
      await client.sendMessage(
        config.owner.number,
        {
          text: `*‚ùå Ocorreu um erro ao processar o comando Gemini (AI Error):*\n\n*ID do remetente:* ${sender}\n*Texto enviado:* ${text}\n*Erro:* \n${JSON.stringify(aiResponse.error)}`,
        },
        { quoted: info, ephemeralExpiration: expirationMessage }
      );
      await client.sendMessage(
        from,
        {
          text: `*‚ùå Ocorreu um erro ao processar sua solicita√ß√£o com a IA. Tente novamente mais tarde.*\n\n*üì® O desenvolvedor j√° foi notificado sobre o erro.*\n*üì®Se desejar entrar em contato, use o link abaixo:*\n${config.owner.whatsapp}`,
        },
        { quoted: info, ephemeralExpiration: expirationMessage }
      );
      return;
    }

    await client.sendMessage(from, { react: { text: "üêà‚Äç‚¨õ", key: info.key } });
    await client.sendMessage(
      from,
      { text: aiResponse.data, mentions: [sender] },
      {
        quoted: info,
        ephemeralExpiration: expirationMessage,
      }
    );

    logger.info(`[ processGeminiCommand ] ‚úÖ Resposta da IA enviada com sucesso para ${from}`);
  } catch (error) {
    logger.error("[ processGeminiCommand ] ‚ùå Erro GERAL ao processar o comando Gemini:", error);

    try {
      await client.sendMessage(from, { react: { text: "‚ùå", key: info.key } });
      await client.sendMessage(
        config.owner.number,
        {
          text: `*‚ùå Ocorreu um erro GERAL ao processar o comando Gemini:*\n\n*ID do remetente:* ${sender}\n*Texto enviado:* ${text}\n*Erro:* \n${error.message}\n${error.stack}`,
        },
        { quoted: info, ephemeralExpiration: expirationMessage }
      );
      await client.sendMessage(
        from,
        {
          text: `*‚ùå Ocorreu um erro inesperado ao processar sua solicita√ß√£o. Tente novamente mais tarde.*\n\n*üì® O desenvolvedor j√° foi notificado sobre o erro.*\n*üì®Se desejar entrar em contato, use o link abaixo:*\n${config.owner.whatsapp}`,
        },
        { quoted: info, ephemeralExpiration: expirationMessage }
      );
    } catch (notifyError) {
      logger.error("[ processGeminiCommand ] ‚ùå Falha ao enviar notifica√ß√£o de erro:", notifyError);
    }
  }
}

/**
 * Processa o comando para definir a instru√ß√£o do sistema do Gemini para um usu√°rio.
 *
 * @async
 * @function processSetPromptCommand
 * @param {object} client - Inst√¢ncia do cliente (ex: Baileys).
 * @param {object} info - Informa√ß√µes da mensagem recebida.
 * @param {string} sender - Identificador do remetente da mensagem.
 * @param {string} from - ID da origem da mensagem (grupo ou privado).
 * @param {string[]} args - Argumentos passados para o comando.
 * @returns {Promise<void>}
 */
async function processSetPromptCommand(client, info, sender, from, args) {
  const newInstruction = args.join(" ");

  if (!newInstruction) {
    logger.warn(`[ processSetPromptCommand ] ‚ö†Ô∏è Tentativa de definir instru√ß√£o vazia por ${sender}`);
    await client.sendMessage(from, { text: "‚ö†Ô∏è Voc√™ precisa fornecer o texto da nova instru√ß√£o ap√≥s o comando.\n\n*Exemplo:* `!setprompt Seja um assistente pirata divertido`" }, { quoted: info });
    return;
  }

  if (newInstruction.length > 500) {
    logger.warn(`[ processSetPromptCommand ] ‚ö†Ô∏è Tentativa de definir instru√ß√£o muito longa por ${sender}`);
    await client.sendMessage(from, { text: "*‚ö†Ô∏è A instru√ß√£o √© muito longa. O limite √© de 500 caracteres.*" }, { quoted: info });
    return;
  }

  try {
    const updateResult = await updateUserSystemInstruction(sender, newInstruction);

    if (updateResult.success) {
      logger.info(`[ processSetPromptCommand ] ‚ö†Ô∏è Instru√ß√£o do sistema atualizada para ${sender}`);
      await client.sendMessage(from, { react: { text: "‚úÖ", key: info.key } });
      await client.sendMessage(from, { text: updateResult.message || "‚úÖ Sua instru√ß√£o de sistema foi atualizada com sucesso! Seu hist√≥rico de chat anterior foi limpo para aplicar a nova instru√ß√£o." }, { quoted: info });
    } else {
      logger.error(`[ processSetPromptCommand ] ‚ö†Ô∏è Falha ao atualizar instru√ß√£o para ${sender}: ${updateResult.error}`);
      await client.sendMessage(from, { react: { text: "‚ùå", key: info.key } });
      await client.sendMessage(from, { text: "‚ùå Ocorreu um erro ao tentar atualizar sua instru√ß√£o. O desenvolvedor foi notificado." }, { quoted: info });
      await client.sendMessage(config.owner.number, { text: `*‚ùå Erro ao atualizar instru√ß√£o (SetPrompt):*\n\n*Usu√°rio:* ${sender}\n*Instru√ß√£o:* ${newInstruction}\n*Erro:* ${updateResult.error}` });
    }
  } catch (error) {
    logger.error(`[ processSetPromptCommand ] ‚ö†Ô∏è Erro inesperado ao processar !setprompt para ${sender}:`, error);
    try {
      await client.sendMessage(from, { react: { text: "‚ùå", key: info.key } });
      await client.sendMessage(from, { text: "‚ùå Ocorreu um erro inesperado ao processar sua solicita√ß√£o. O desenvolvedor foi notificado." }, { quoted: info });
      await client.sendMessage(config.owner.number, { text: `*‚ùå Erro INESPERADO ao atualizar instru√ß√£o (SetPrompt):*\n\n*Usu√°rio:* ${sender}\n*Instru√ß√£o:* ${newInstruction}\n*Erro:* ${error.message}\n${error.stack}` }); // Include stack trace for unexpected errors
    } catch (notifyError) {
      logger.error("[ processSetPromptCommand ] ‚ö†Ô∏è Falha ao enviar notifica√ß√£o de erro inesperado:", notifyError);
    }
  }
}

/**
 * Encontra e retorna a primeira m√≠dia v√°lida em um objeto de tipos de m√≠dia.
 *
 * @function findFirstValidMedia
 * @param {Object} mediaTypes - Objeto contendo arrays com poss√≠veis caminhos de m√≠dia.
 * @returns {Object|null} - O primeiro objeto de m√≠dia encontrado ou null.
 */
function findFirstValidMedia(mediaTypes) {
  for (const paths of Object.values(mediaTypes)) {
    const media = paths.find(path => path);
    if (media) return media;
  }
  return null;
}

/**
 * Constr√≥i o prompt para envio √† IA, podendo conter texto e imagem codificada.
 *
 * @async
 * @function buildPrompt
 * @param {Object|null} media - Objeto de m√≠dia (imagem), se houver.
 * @param {string} text - Texto enviado pelo usu√°rio.
 * @returns {Promise<Object>} - Objeto `parts` formatado para consumo pela IA.
 */
async function buildPrompt(media, text) {
  const basePart = { text };
  if (!media) return { parts: [basePart] };

  try {
    const buffer = await getFileBuffer(media, "image");
    if (!buffer) {
      logger.warn("[ buildPrompt ] ‚ö†Ô∏è N√£o foi poss√≠vel obter o buffer da imagem.");
      return { parts: [basePart] }; // Proceed without image if buffer fails
    }
    return {
      parts: [
        basePart,
        {
          inlineData: {
            mimeType: "image/jpeg", // Assuming jpeg, might need refinement if other types are common
            data: buffer.toString("base64"),
          },
        },
      ],
    };
  } catch (error) {
    logger.error("[ buildPrompt ] ‚ùå Erro ao processar imagem para o prompt:", error);
    return { parts: [basePart] }; // Fallback to text-only on error
  }
}

module.exports = {
  processGeminiCommand,
  processSetPromptCommand, // Export the new function
};
