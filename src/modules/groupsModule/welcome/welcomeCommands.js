/**
 * @fileoverview Comandos para gerenciar as configura√ß√µes de boas-vindas e sa√≠da de grupos.
 * Este m√≥dulo define as fun√ß√µes que lidam com os comandos do usu√°rio (ex: !welcome, !setwelcome)
 * para ativar/desativar mensagens de boas-vindas/sa√≠da, definir textos personalizados e
 * configurar URLs de m√≠dia para essas mensagens. Ele utiliza fun√ß√µes de um m√≥dulo
 * processador (`processWelcome`) para interagir com o banco de dados ou estado da aplica√ß√£o.
 * @requires path - M√≥dulo Node.js para lidar com caminhos de arquivo.
 * @requires ../../../config/options.json - Arquivo de configura√ß√£o do bot (prefixo, etc.).
 * @requires ../../../utils/logger - M√≥dulo de logging para registrar informa√ß√µes e erros.
 * @requires ./processWelcome - Fun√ß√µes de processamento das configura√ß√µes de boas-vindas/sa√≠da no DB.
 */

const path = require("path");
// Carrega as configura√ß√µes do bot, como o prefixo dos comandos.
const config = require(path.join(__dirname, "../../../config/options.json"));
// M√≥dulo de logging para registrar eventos e erros.
const logger = require("../../../utils/logger");
// M√≥dulo que cont√©m a l√≥gica para interagir com o banco de dados e atualizar as configura√ß√µes de welcome/exit.
const welcomeProcessor = require("./processWelcome"); // J√° usa as fun√ß√µes refatoradas
// Define o prefixo prim√°rio dos comandos, buscando do arquivo de configura√ß√£o ou usando '!' como padr√£o.
const primaryPrefix = config.bot?.globalSettings?.prefix?.[0] || "!";

// --- Fun√ß√µes Auxiliares ---

/**
 * Verifica se uma string √© uma URL HTTP/HTTPS v√°lida.
 * Utiliza a API nativa `URL` do Node.js para tentar parsear a string.
 *
 * @param {string} string - A string a ser verificada.
 * @returns {boolean} Retorna `true` se a string for uma URL HTTP ou HTTPS v√°lida, `false` caso contr√°rio.
 * @example
 * isValidHttpUrl("https://example.com"); // true
 * isValidHttpUrl("http://localhost:3000"); // true
 * isValidHttpUrl("ftp://example.com"); // false
 * isValidHttpUrl("not a url"); // false
 */
const isValidHttpUrl = string => {
  let url;
  try {
    // Tenta criar um objeto URL. Se falhar (lan√ßar exce√ß√£o), a string n√£o √© uma URL v√°lida.
    url = new URL(string);
  } catch (_) {
    return false; // Captura a exce√ß√£o e retorna false.
  }
  // Verifica se o protocolo da URL √© 'http:' ou 'https:'.
  return url.protocol === "http:" || url.protocol === "https:";
};

/**
 * Envia uma rea√ß√£o (emoji) a uma mensagem espec√≠fica no chat.
 * Encapsula a chamada da API do cliente para facilitar o uso e adicionar tratamento de erro.
 *
 * @async
 * @param {object} client - A inst√¢ncia do cliente WhatsApp (ex: Baileys). Deve ter o m√©todo `sendMessage`.
 * @param {string} from - O JID (ID) do chat onde a mensagem original est√°.
 * @param {object} key - A chave da mensagem original √† qual a rea√ß√£o ser√° adicionada.
 * @param {string} reaction - O emoji a ser enviado como rea√ß√£o.
 * @returns {Promise<void>} Uma promessa que resolve quando a rea√ß√£o √© enviada ou falha.
 * @example
 * await _sendReaction(client, 'group@g.us', messageInfo.key, '‚úÖ');
 */
const _sendReaction = async (client, from, key, reaction) => {
  try {
    // Chama o m√©todo do cliente para enviar a rea√ß√£o.
    await client.sendMessage(from, { react: { text: reaction, key } });
  } catch (reactError) {
    // Registra um aviso se o envio da rea√ß√£o falhar, mas n√£o interrompe o fluxo principal.
    logger.warn(`[WelcomeCommands] Falha ao enviar rea√ß√£o "${reaction}" para ${from}: ${reactError.message}`);
  }
};

/**
 * Envia uma atualiza√ß√£o de presen√ßa (status como "digitando...", "gravando √°udio...", etc.) para o chat.
 * √ötil para fornecer feedback visual ao usu√°rio enquanto o bot processa um comando.
 *
 * @async
 * @param {object} client - A inst√¢ncia do cliente WhatsApp (ex: Baileys). Deve ter o m√©todo `sendPresenceUpdate`.
 * @param {string} from - O JID (ID) do chat para o qual a presen√ßa ser√° atualizada.
 * @param {'composing' | 'paused' | 'recording' | 'available' | 'unavailable'} status - O status de presen√ßa a ser enviado.
 * @returns {Promise<void>} Uma promessa que resolve quando a atualiza√ß√£o √© enviada ou falha.
 * @example
 * await _sendPresenceUpdate(client, 'user@s.whatsapp.net', 'composing'); // Mostra "digitando..."
 * await _sendPresenceUpdate(client, 'user@s.whatsapp.net', 'paused'); // Limpa o status
 */
const _sendPresenceUpdate = async (client, from, status) => {
  try {
    // Chama o m√©todo do cliente para atualizar a presen√ßa.
    await client.sendPresenceUpdate(status, from);
  } catch (presenceError) {
    // Registra um aviso se a atualiza√ß√£o de presen√ßa falhar.
    logger.warn(`[WelcomeCommands] Falha ao enviar presence update "${status}" para ${from}: ${presenceError.message}`);
  }
};

/**
 * Verifica se o comando foi executado dentro de um grupo e se o remetente √© um administrador do grupo.
 * Esta fun√ß√£o √© essencial para garantir que apenas administradores possam modificar as configura√ß√µes do grupo.
 * Se as condi√ß√µes n√£o forem atendidas, envia mensagens de erro informativas e rea√ß√µes apropriadas ao usu√°rio.
 *
 * @async
 * @param {object} client - A inst√¢ncia do cliente WhatsApp.
 * @param {object} info - O objeto de informa√ß√µes da mensagem recebida (cont√©m `key`, `sender`, etc.).
 * @param {string} from - O JID (ID) do chat onde o comando foi recebido.
 * @param {boolean} isGroup - Indica se a mensagem veio de um grupo (`true`) ou chat privado (`false`).
 * @param {boolean} isGroupAdmin - Indica se o remetente da mensagem √© administrador do grupo (`true`) ou n√£o (`false`).
 * @param {number} expirationMessage - A dura√ß√£o (em segundos) para mensagens ef√™meras (se aplic√°vel).
 * @param {string} commandName - O nome do comando (ex: "!welcome") para incluir nas mensagens de erro.
 * @returns {Promise<boolean>} Retorna `true` se o remetente for um administrador dentro de um grupo, `false` caso contr√°rio.
 */
const _ensureGroupAdmin = async (client, info, from, isGroup, isGroupAdmin, expirationMessage, commandName) => {
  // Verifica se a mensagem N√ÉO veio de um grupo.
  if (!isGroup) {
    // Envia uma rea√ß√£o de aviso.
    await _sendReaction(client, from, info.key, "‚ö†Ô∏è");
    // Envia uma mensagem explicando que o comando s√≥ funciona em grupos.
    await client.sendMessage(
      from,
      {
        text: `Ol√°! üëã O comando \`${commandName}\` foi feito especialmente para gerenciar as configura√ß√µes de grupos. Por favor, use-o dentro do grupo que deseja configurar.`,
      },
      // Responde √† mensagem original e aplica a expira√ß√£o, se houver.
      { quoted: info, ephemeralExpiration: expirationMessage }
    );
    // Retorna false, indicando que a verifica√ß√£o falhou.
    return false;
  }

  // Verifica se a mensagem veio de um grupo, mas o remetente N√ÉO √© administrador.
  if (!isGroupAdmin) {
    // Registra um aviso no log.
    logger.warn(`[${commandName}] Usu√°rio ${info.sender.id} tentou usar o comando em ${from} mas n√£o √© admin.`);
    // Envia uma rea√ß√£o de "protegido" ou "n√£o permitido".
    await _sendReaction(client, from, info.key, "üõ°Ô∏è");
    // Envia uma mensagem explicando que apenas administradores podem usar o comando.
    await client.sendMessage(
      from,
      {
        text: `Para garantir que apenas pessoas autorizadas modifiquem as configura√ß√µes do grupo, o comando \`${commandName}\` s√≥ pode ser usado por administradores. üõ°Ô∏è`,
      },
      // Responde √† mensagem original e aplica a expira√ß√£o, se houver.
      { quoted: info, ephemeralExpiration: expirationMessage }
    );
    // Retorna false, indicando que a verifica√ß√£o falhou.
    return false;
  }
  // Se passou pelas duas verifica√ß√µes, significa que √© um admin em um grupo.
  return true;
};

/**
 * Fun√ß√£o gen√©rica e reutiliz√°vel para executar a l√≥gica principal de um comando de boas-vindas/sa√≠da.
 * Esta fun√ß√£o abstrai o fluxo comum:
 * 1. Verificar permiss√µes (admin de grupo).
 * 2. Validar os argumentos do comando.
 * 3. Enviar feedback de processamento (rea√ß√£o, "digitando...").
 * 4. Chamar a fun√ß√£o de processamento apropriada (que interage com o DB/estado).
 * 5. Enviar feedback de sucesso ou erro (rea√ß√£o, mensagem).
 * 6. Limpar o status de presen√ßa ("digitando...").
 *
 * @async
 * @param {object} options - Um objeto contendo todas as op√ß√µes necess√°rias para a execu√ß√£o.
 * @param {object} options.client - A inst√¢ncia do cliente WhatsApp.
 * @param {object} options.info - O objeto de informa√ß√µes da mensagem original.
 * @param {string} options.from - O JID do chat (ID do grupo).
 * @param {string} options.sender - O JID do remetente do comando.
 * @param {string} options.text - Os argumentos fornecidos ao comando (o texto ap√≥s o nome do comando).
 * @param {number} options.expirationMessage - A dura√ß√£o para mensagens ef√™meras.
 * @param {boolean} options.isGroup - Flag indicando se a mensagem veio de um grupo.
 * @param {boolean} options.isGroupAdmin - Flag indicando se o remetente √© admin.
 * @param {string} options.commandName - O nome completo do comando (ex: "!welcome"). Usado em mensagens.
 * @param {string} options.actionName - Um nome descritivo da a√ß√£o sendo executada (ex: "setWelcomeStatus"). Usado para logging.
 * @param {Function} options.validationFn - Uma fun√ß√£o que recebe `options.text` (os argumentos do comando). Ela deve:
 *   - Validar e processar o input.
 *   - Retornar o valor pronto para ser passado √† `processorFn`.
 *   - Lan√ßar um `Error` com uma mensagem amig√°vel para o usu√°rio se a valida√ß√£o falhar.
 * @param {Function} options.processorFn - A fun√ß√£o ass√≠ncrona do `welcomeProcessor` que efetivamente realiza a a√ß√£o (ex: `welcomeProcessor.setWelcomeStatus`). Espera receber `groupId` e o valor retornado por `validationFn`.
 * @param {Function} options.successMessageFn - Uma fun√ß√£o que recebe o valor processado (o mesmo passado para `processorFn`) e retorna a string da mensagem de sucesso a ser enviada ao usu√°rio.
 * @param {string} options.errorMessageText - O texto da mensagem de erro gen√©rica a ser enviada ao usu√°rio se `processorFn` falhar.
 * @returns {Promise<void>} Uma promessa que resolve ap√≥s a conclus√£o do fluxo do comando.
 */
const _executeWelcomeCommandLogic = async ({ client, info, from, sender, text, expirationMessage, isGroup, isGroupAdmin, commandName, actionName, validationFn, processorFn, successMessageFn, errorMessageText }) => {
  // O ID do grupo √© o mesmo JID de onde a mensagem veio.
  const groupId = from;

  // 1. Verificar permiss√µes (Admin em Grupo)
  const isAdminInGroup = await _ensureGroupAdmin(client, info, from, isGroup, isGroupAdmin, expirationMessage, commandName);
  // Se a verifica√ß√£o falhar, a fun√ß√£o _ensureGroupAdmin j√° enviou a mensagem de erro, ent√£o apenas retornamos.
  if (!isAdminInGroup) {
    return;
  }

  // Vari√°vel para armazenar o valor validado a ser definido.
  let valueToSet;
  try {
    // 2. Validar os argumentos do comando usando a fun√ß√£o fornecida.
    valueToSet = validationFn(text);
  } catch (validationError) {
    // Se a valida√ß√£o lan√ßar um erro, captura-o.
    logger.warn(`[${actionName}] Falha na valida√ß√£o para ${groupId} por ${sender}: ${validationError.message}`);
    // Envia rea√ß√£o de "pensando" ou "confuso".
    await _sendReaction(client, from, info.key, "ü§î");
    // Envia a mensagem de erro da exce√ß√£o (que deve ser amig√°vel).
    await client.sendMessage(from, { text: validationError.message }, { quoted: info, ephemeralExpiration: expirationMessage });
    // Interrompe a execu√ß√£o do comando.
    return;
  }

  // 3. Enviar feedback de processamento inicial.
  await _sendReaction(client, from, info.key, "‚è≥"); // Rea√ß√£o de "processando".
  await _sendPresenceUpdate(client, from, "composing"); // Mostra "digitando...".

  try {
    // 4. Chamar a fun√ß√£o de processamento principal (intera√ß√£o com DB/estado).
    await processorFn(groupId, valueToSet);
    // Loga o sucesso da opera√ß√£o.
    logger.info(`[${actionName}] A√ß√£o para ${groupId} executada com sucesso por ${sender}. Valor: ${JSON.stringify(valueToSet)}`);

    // 5. Enviar feedback de sucesso.
    // Gera a mensagem de sucesso usando a fun√ß√£o fornecida.
    const successMessage = successMessageFn(valueToSet);
    await _sendReaction(client, from, info.key, "‚úÖ"); // Rea√ß√£o de sucesso.
    // Envia a mensagem de sucesso.
    await client.sendMessage(from, { text: successMessage }, { quoted: info, ephemeralExpiration: expirationMessage });
  } catch (error) {
    // Se a fun√ß√£o `processorFn` lan√ßar um erro (ex: falha no DB).
    logger.error(`[${actionName}] Erro ao processar para ${groupId}: ${error.message}`, { stack: error.stack });
    // 5. Enviar feedback de erro.
    await _sendReaction(client, from, info.key, "‚ùå"); // Rea√ß√£o de erro.
    // Envia a mensagem de erro gen√©rica definida para este comando.
    await client.sendMessage(from, { text: errorMessageText }, { quoted: info, ephemeralExpiration: expirationMessage });
  } finally {
    // 6. Limpar o status de presen√ßa, independentemente de sucesso ou falha.
    await _sendPresenceUpdate(client, from, "paused");
  }
};

// --- Fun√ß√µes Handler de Comandos Espec√≠ficos ---

/**
 * Manipula o comando para ativar ou desativar as mensagens de boas-vindas e sa√≠da.
 * Comando: !welcome [on|off|ativar|desativar|1|0]
 *
 * @async
 * @param {object} client - Inst√¢ncia do cliente WhatsApp.
 * @param {object} info - Objeto de informa√ß√µes da mensagem.
 * @param {string} sender - JID do remetente.
 * @param {string} from - JID do chat (grupo).
 * @param {string} text - Argumentos do comando (ex: "on", "off").
 * @param {number} expirationMessage - Dura√ß√£o da mensagem ef√™mera.
 * @param {boolean} isGroup - Se a mensagem veio de um grupo.
 * @param {boolean} isGroupAdmin - Se o remetente √© admin do grupo.
 * @returns {Promise<void>}
 */
async function handleWelcomeToggleCommand(client, info, sender, from, text, expirationMessage, isGroup, isGroupAdmin) {
  // Define o nome do comando para mensagens e logs.
  const commandName = `${primaryPrefix}welcome`;
  // Define o nome da a√ß√£o para logs.
  const actionName = "setWelcomeStatus";

  /**
   * Fun√ß√£o de valida√ß√£o para o comando !welcome.
   * Verifica se o argumento √© uma das op√ß√µes v√°lidas (on, off, etc.) e retorna o booleano correspondente.
   * Lan√ßa um erro com instru√ß√µes de uso se o argumento for inv√°lido.
   * @param {string} inputText - O texto do argumento.
   * @returns {boolean} `true` para ativar, `false` para desativar.
   * @throws {Error} Se o argumento for inv√°lido.
   */
  const validationFn = inputText => {
    const argument = inputText.trim().toLowerCase();
    // Verifica as op√ß√µes para ATIVAR.
    if (argument === "on" || argument === "ativar" || argument === "1") {
      return true;
    }
    // Verifica as op√ß√µes para DESATIVAR.
    if (argument === "off" || argument === "desativar" || argument === "0") {
      return false;
    }
    // Se n√£o for nenhuma das op√ß√µes v√°lidas, lan√ßa um erro com a mensagem de ajuda.
    throw new Error(`Hmm, parece que o comando n√£o foi usado corretamente. ü§î Para ativar ou desativar as mensagens de boas-vindas e sa√≠da, use:\n\n‚û°Ô∏è \`${commandName} on\` (para ativar)\n‚û°Ô∏è \`${commandName} off\` (para desativar)`);
  };

  /**
   * Fun√ß√£o para gerar a mensagem de sucesso para o comando !welcome.
   * Informa o novo status e d√° dicas sobre como personalizar as mensagens.
   * @param {boolean} enabled - O novo status (true se ativado, false se desativado).
   * @returns {string} A mensagem de sucesso formatada.
   */
  const successMessageFn = enabled => {
    // Define a parte da mensagem que indica o status (ativadas/desativadas).
    const statusMsg = enabled ? "ativadas" : "desativadas";
    // Define uma explica√ß√£o sobre o que acontece agora.
    const explanation = enabled ? "Agora, novos membros ser√£o recebidos e membros que sa√≠rem ter√£o uma despedida autom√°tica!" : `As mensagens autom√°ticas n√£o ser√£o mais enviadas. üîá\n\n*Importante:* Suas configura√ß√µes personalizadas de texto e m√≠dia foram mantidas, mas ser√£o ignoradas enquanto este recurso estiver desativado. Elas voltar√£o a ser usadas se voc√™ reativar com \`${commandName} on\`.`;

    // Define um texto de ajuda sobre como personalizar as mensagens (texto e m√≠dia).
    const customizationInfo =
      `\n\n‚ú® *Quer personalizar ainda mais?*` +
      `\nUse os comandos abaixo para definir textos e m√≠dias espec√≠ficas:` +
      `\n- \`${primaryPrefix}setwelcome <mensagem>\`: Define o texto de boas-vindas.` +
      `\n- \`${primaryPrefix}setwelcomemedia <url>\`: Adiciona imagem/v√≠deo √†s boas-vindas.` +
      `\n- \`${primaryPrefix}setexit <mensagem>\`: Define o texto de despedida.` +
      `\n- \`${primaryPrefix}setexitmedia <url>\`: Adiciona imagem/v√≠deo √† despedida.` +
      // Explica os placeholders dispon√≠veis para usar nas mensagens.
      `\n\nüí° *Dica de Personaliza√ß√£o (Placeholders):*` +
      `\nNas mensagens (\`${primaryPrefix}setwelcome\` e \`${primaryPrefix}setexit\`), voc√™ pode usar:` +
      `\n  ‚Ä¢ \`{user}\`: Men√ß√£o (@) do membro.` +
      `\n  ‚Ä¢ \`{groupName}\`: Nome do grupo.` +
      `\n  ‚Ä¢ \`{desc}\`: Descri√ß√£o do grupo.` +
      `\n  ‚Ä¢ \`{size}\`: N√∫mero de participantes.` +
      `\n  ‚Ä¢ \`{createdAt}\`: Data de cria√ß√£o (DD/MM/AAAA).` +
      `\n  ‚Ä¢ \`{ownerNumber}\`: N√∫mero do criador.` +
      `\n\n*Exemplo:* \`${primaryPrefix}setwelcome Ol√° {user}, bem-vindo(a) ao {groupName}!\`` +
      `\n\nLembre-se que estas personaliza√ß√µes s√≥ ter√£o efeito se as mensagens estiverem ativadas (\`${commandName} on\`). üòâ`;

    // Monta a mensagem final.
    return `‚úÖ Prontinho! As mensagens autom√°ticas de boas-vindas e sa√≠da para este grupo foram ${statusMsg}. üéâ\n\n${explanation}${customizationInfo}`;
  };

  // Define a mensagem de erro gen√©rica para falhas no processamento deste comando.
  const errorMessageText = "‚ùå Ops! Algo deu errado ao tentar atualizar o status das mensagens de boas-vindas/sa√≠da. üò• Por favor, tente novamente em alguns instantes. Se o problema persistir, entre em contato com o suporte.";

  // Chama a fun√ß√£o gen√©rica de execu√ß√£o com todas as configura√ß√µes espec√≠ficas para este comando.
  await _executeWelcomeCommandLogic({
    client,
    info,
    from,
    sender,
    text,
    expirationMessage,
    isGroup,
    isGroupAdmin,
    commandName,
    actionName,
    validationFn, // Fun√ß√£o de valida√ß√£o espec√≠fica
    processorFn: welcomeProcessor.setWelcomeStatus, // Fun√ß√£o do processador para definir o status
    successMessageFn, // Fun√ß√£o de mensagem de sucesso espec√≠fica
    errorMessageText, // Mensagem de erro espec√≠fica
  });
}

/**
 * Manipula o comando para definir a mensagem de boas-vindas personalizada.
 * Comando: !setwelcome [mensagem de boas-vindas | (vazio para limpar)]
 *
 * @async
 * @param {object} client - Inst√¢ncia do cliente WhatsApp.
 * @param {object} info - Objeto de informa√ß√µes da mensagem.
 * @param {string} sender - JID do remetente.
 * @param {string} from - JID do chat (grupo).
 * @param {string} text - Argumentos do comando (a mensagem de boas-vindas).
 * @param {number} expirationMessage - Dura√ß√£o da mensagem ef√™mera.
 * @param {boolean} isGroup - Se a mensagem veio de um grupo.
 * @param {boolean} isGroupAdmin - Se o remetente √© admin do grupo.
 * @returns {Promise<void>}
 */
async function handleSetWelcomeMessageCommand(client, info, sender, from, text, expirationMessage, isGroup, isGroupAdmin) {
  const commandName = `${primaryPrefix}setwelcome`;
  const actionName = "setWelcomeMessage";

  /**
   * Fun√ß√£o de valida√ß√£o para o comando !setwelcome.
   * Remove espa√ßos extras e retorna a mensagem ou null se vazia (para limpar).
   * Lan√ßa erro se a mensagem contiver apenas espa√ßos.
   * @param {string} inputText - O texto da mensagem fornecida.
   * @returns {string | null} A mensagem trimada ou null para limpar a configura√ß√£o.
   * @throws {Error} Se a mensagem for inv√°lida (apenas espa√ßos).
   */
  const validationFn = inputText => {
    // Remove espa√ßos do in√≠cio e fim.
    const welcomeMessage = inputText.trim();
    // Verifica se o input original tinha algo, mas ap√≥s trim ficou vazio (s√≥ espa√ßos).
    if (inputText.length > 0 && welcomeMessage.length === 0) {
      throw new Error(`ü§î Parece que voc√™ tentou definir uma mensagem, mas ela continha apenas espa√ßos em branco. Por favor, forne√ßa um texto v√°lido.\n\n*Exemplo:* \`${commandName} Ol√° {user}!\`\n\nPara remover a mensagem personalizada atual (usar a padr√£o), use o comando sem nenhum texto ap√≥s ele: \`${commandName}\``);
    }
    // Retorna a mensagem trimada, ou null se o input original j√° era vazio (inten√ß√£o de limpar).
    return welcomeMessage || null;
  };

  /**
   * Fun√ß√£o para gerar a mensagem de sucesso para o comando !setwelcome.
   * Confirma a atualiza√ß√£o ou remo√ß√£o da mensagem personalizada.
   * @param {string | null} message - A mensagem que foi definida (ou null se foi removida).
   * @returns {string} A mensagem de sucesso formatada.
   */
  const successMessageFn = message => {
    // Se uma mensagem foi definida...
    if (message) {
      return `‚úÖ Mensagem de boas-vindas atualizada! üéâ Agora, quando algu√©m entrar (e as boas-vindas estiverem ativadas), receber√°:\n\n_"${message}"_\n\n‚ú® *Lembre-se dos placeholders:* \`{user}\`, \`{groupName}\`, \`{desc}\`, \`{size}\`, \`{createdAt}\`, \`{ownerNumber}\``;
    } else {
      // Se a mensagem foi removida (definida como null).
      return `‚úÖ A mensagem de boas-vindas personalizada foi removida. O sistema voltar√° a usar a mensagem padr√£o (se as boas-vindas estiverem ativadas). Para definir uma nova, use \`${commandName} Sua nova mensagem aqui\`.`;
    }
  };

  // Mensagem de erro gen√©rica para este comando.
  const errorMessageText = "‚ùå Que pena! N√£o consegui salvar a nova mensagem de boas-vindas. üò• Tente novamente, por favor. Se o erro continuar, fale com o suporte.";

  // Chama a fun√ß√£o gen√©rica de execu√ß√£o.
  await _executeWelcomeCommandLogic({
    client,
    info,
    from,
    sender,
    text,
    expirationMessage,
    isGroup,
    isGroupAdmin,
    commandName,
    actionName,
    validationFn,
    processorFn: welcomeProcessor.setWelcomeMessage, // Fun√ß√£o do processador para definir a mensagem
    successMessageFn,
    errorMessageText,
  });
}

/**
 * Manipula o comando para definir a URL da m√≠dia (imagem/v√≠deo) de boas-vindas.
 * Comando: !setwelcomemedia [URL da m√≠dia | (vazio para limpar)]
 *
 * @async
 * @param {object} client - Inst√¢ncia do cliente WhatsApp.
 * @param {object} info - Objeto de informa√ß√µes da mensagem.
 * @param {string} sender - JID do remetente.
 * @param {string} from - JID do chat (grupo).
 * @param {string} text - Argumentos do comando (a URL da m√≠dia).
 * @param {number} expirationMessage - Dura√ß√£o da mensagem ef√™mera.
 * @param {boolean} isGroup - Se a mensagem veio de um grupo.
 * @param {boolean} isGroupAdmin - Se o remetente √© admin do grupo.
 * @returns {Promise<void>}
 */
async function handleSetWelcomeMediaCommand(client, info, sender, from, text, expirationMessage, isGroup, isGroupAdmin) {
  const commandName = `${primaryPrefix}setwelcomemedia`;
  const actionName = "setWelcomeMedia";

  /**
   * Fun√ß√£o de valida√ß√£o para o comando !setwelcomemedia.
   * Verifica se a URL fornecida √© uma URL HTTP/HTTPS v√°lida.
   * Retorna a URL trimada ou null se vazia (para limpar).
   * @param {string} inputText - O texto da URL fornecida.
   * @returns {string | null} A URL validada e trimada, ou null para limpar.
   * @throws {Error} Se a URL for inv√°lida.
   */
  const validationFn = inputText => {
    const mediaUrl = inputText.trim();
    // Se uma URL foi fornecida, mas n√£o √© v√°lida...
    if (mediaUrl && !isValidHttpUrl(mediaUrl)) {
      throw new Error(`‚ùå A URL fornecida n√£o parece v√°lida. ü§î Certifique-se de que ela come√ßa com \`http://\` ou \`https://\` e leva diretamente para uma imagem ou v√≠deo (ex: \`https://site.com/imagem.jpg\`).\n\nPara remover a m√≠dia atual, use o comando sem nenhuma URL: \`${commandName}\``);
    }
    // Retorna a URL trimada, ou null se o input era vazio.
    return mediaUrl || null;
  };

  /**
   * Fun√ß√£o para gerar a mensagem de sucesso para o comando !setwelcomemedia.
   * Confirma a configura√ß√£o ou remo√ß√£o da URL da m√≠dia.
   * @param {string | null} url - A URL que foi definida (ou null se foi removida).
   * @returns {string} A mensagem de sucesso formatada.
   */
  const successMessageFn = url => {
    // Se uma URL foi definida...
    if (url) {
      return `‚úÖ M√≠dia de boas-vindas configurada! üñºÔ∏è A imagem/v√≠deo da URL fornecida ser√° enviada junto com a mensagem de boas-vindas (se as boas-vindas estiverem ativadas).\n\n*Importante:* A URL deve ser p√∫blica e direta para o arquivo de m√≠dia.`;
    } else {
      // Se a URL foi removida.
      return `‚úÖ M√≠dia de boas-vindas removida. Apenas a mensagem de texto ser√° enviada agora (se as boas-vindas estiverem ativadas).`;
    }
  };

  // Mensagem de erro gen√©rica para este comando.
  const errorMessageText = "‚ùå Ah, n√£o! Algo impediu de salvar a URL da m√≠dia de boas-vindas. üò• Por favor, tente novamente. Verifique se a URL est√° correta e acess√≠vel publicamente. Se o erro persistir, contate o suporte.";

  // Chama a fun√ß√£o gen√©rica de execu√ß√£o.
  await _executeWelcomeCommandLogic({
    client,
    info,
    from,
    sender,
    text,
    expirationMessage,
    isGroup,
    isGroupAdmin,
    commandName,
    actionName,
    validationFn,
    processorFn: welcomeProcessor.setWelcomeMedia, // Fun√ß√£o do processador para definir a m√≠dia
    successMessageFn,
    errorMessageText,
  });
}

/**
 * Manipula o comando para definir a mensagem de sa√≠da personalizada.
 * Comando: !setexit [mensagem de sa√≠da | (vazio para limpar)]
 *
 * @async
 * @param {object} client - Inst√¢ncia do cliente WhatsApp.
 * @param {object} info - Objeto de informa√ß√µes da mensagem.
 * @param {string} sender - JID do remetente.
 * @param {string} from - JID do chat (grupo).
 * @param {string} text - Argumentos do comando (a mensagem de sa√≠da).
 * @param {number} expirationMessage - Dura√ß√£o da mensagem ef√™mera.
 * @param {boolean} isGroup - Se a mensagem veio de um grupo.
 * @param {boolean} isGroupAdmin - Se o remetente √© admin do grupo.
 * @returns {Promise<void>}
 */
async function handleSetExitMessageCommand(client, info, sender, from, text, expirationMessage, isGroup, isGroupAdmin) {
  const commandName = `${primaryPrefix}setexit`;
  const actionName = "setExitMessage";

  /**
   * Fun√ß√£o de valida√ß√£o para o comando !setexit.
   * Similar √† valida√ß√£o de !setwelcome.
   * @param {string} inputText - O texto da mensagem fornecida.
   * @returns {string | null} A mensagem trimada ou null para limpar.
   * @throws {Error} Se a mensagem for inv√°lida (apenas espa√ßos).
   */
  const validationFn = inputText => {
    const exitMessage = inputText.trim();
    if (inputText.length > 0 && exitMessage.length === 0) {
      throw new Error(`ü§î Parece que voc√™ tentou definir uma mensagem de sa√≠da, mas ela continha apenas espa√ßos em branco. Por favor, forne√ßa um texto v√°lido.\n\n*Exemplo:* \`${commandName} Adeus {user}!\`\n\nPara remover a mensagem personalizada atual (usar a padr√£o), use o comando sem nenhum texto ap√≥s ele: \`${commandName}\``);
    }
    return exitMessage || null;
  };

  /**
   * Fun√ß√£o para gerar a mensagem de sucesso para o comando !setexit.
   * Confirma a atualiza√ß√£o ou remo√ß√£o da mensagem personalizada.
   * @param {string | null} message - A mensagem que foi definida (ou null se foi removida).
   * @returns {string} A mensagem de sucesso formatada.
   */
  const successMessageFn = message => {
    if (message) {
      return `‚úÖ Mensagem de sa√≠da atualizada! üëã Agora, quando algu√©m sair (e as mensagens estiverem ativadas), receber√°:\n\n_"${message}"_\n\n‚ú® *Lembre-se dos placeholders:* \`{user}\`, \`{groupName}\`, \`{desc}\`, \`{size}\`, \`{createdAt}\`, \`{ownerNumber}\``;
    } else {
      return `‚úÖ A mensagem de sa√≠da personalizada foi removida. O sistema usar√° a mensagem padr√£o (se as mensagens estiverem ativadas). Para definir uma nova, use \`${commandName} Sua mensagem de despedida\`.`;
    }
  };

  // Mensagem de erro gen√©rica para este comando.
  const errorMessageText = "‚ùå Poxa! N√£o foi poss√≠vel salvar a nova mensagem de sa√≠da. üò• Tente novamente, por favor. Se o erro continuar, fale com o suporte.";

  // Chama a fun√ß√£o gen√©rica de execu√ß√£o.
  await _executeWelcomeCommandLogic({
    client,
    info,
    from,
    sender,
    text,
    expirationMessage,
    isGroup,
    isGroupAdmin,
    commandName,
    actionName,
    validationFn,
    processorFn: welcomeProcessor.setExitMessage, // Fun√ß√£o do processador para definir a mensagem de sa√≠da
    successMessageFn,
    errorMessageText,
  });
}

/**
 * Manipula o comando para definir a URL da m√≠dia (imagem/v√≠deo) de sa√≠da.
 * Comando: !setexitmedia [URL da m√≠dia | (vazio para limpar)]
 *
 * @async
 * @param {object} client - Inst√¢ncia do cliente WhatsApp.
 * @param {object} info - Objeto de informa√ß√µes da mensagem.
 * @param {string} sender - JID do remetente.
 * @param {string} from - JID do chat (grupo).
 * @param {string} text - Argumentos do comando (a URL da m√≠dia).
 * @param {number} expirationMessage - Dura√ß√£o da mensagem ef√™mera.
 * @param {boolean} isGroup - Se a mensagem veio de um grupo.
 * @param {boolean} isGroupAdmin - Se o remetente √© admin do grupo.
 * @returns {Promise<void>}
 */
async function handleSetExitMediaCommand(client, info, sender, from, text, expirationMessage, isGroup, isGroupAdmin) {
  const commandName = `${primaryPrefix}setexitmedia`;
  const actionName = "setExitMedia";

  /**
   * Fun√ß√£o de valida√ß√£o para o comando !setexitmedia.
   * Similar √† valida√ß√£o de !setwelcomemedia.
   * @param {string} inputText - O texto da URL fornecida.
   * @returns {string | null} A URL validada e trimada, ou null para limpar.
   * @throws {Error} Se a URL for inv√°lida.
   */
  const validationFn = inputText => {
    const mediaUrl = inputText.trim();
    if (mediaUrl && !isValidHttpUrl(mediaUrl)) {
      throw new Error(`‚ùå A URL fornecida n√£o parece v√°lida. ü§î Certifique-se de que ela come√ßa com \`http://\` ou \`https://\` e leva diretamente para uma imagem ou v√≠deo (ex: \`https://site.com/video.mp4\`).\n\nPara remover a m√≠dia atual, use o comando sem nenhuma URL: \`${commandName}\``);
    }
    return mediaUrl || null;
  };

  /**
   * Fun√ß√£o para gerar a mensagem de sucesso para o comando !setexitmedia.
   * Confirma a configura√ß√£o ou remo√ß√£o da URL da m√≠dia de sa√≠da.
   * @param {string | null} url - A URL que foi definida (ou null se foi removida).
   * @returns {string} A mensagem de sucesso formatada.
   */
  const successMessageFn = url => {
    if (url) {
      return `‚úÖ M√≠dia de sa√≠da configurada! üé¨ A imagem/v√≠deo da URL fornecida ser√° enviada junto com a mensagem de sa√≠da (se as mensagens estiverem ativadas).\n\n*Importante:* A URL deve ser p√∫blica e direta para o arquivo de m√≠dia.`;
    } else {
      return `‚úÖ M√≠dia de sa√≠da removida. Apenas a mensagem de texto ser√° enviada agora (se as mensagens estiverem ativadas).`;
    }
  };

  // Mensagem de erro gen√©rica para este comando.
  const errorMessageText = "‚ùå Que chato! Algo impediu de salvar a URL da m√≠dia de sa√≠da. üò• Por favor, tente novamente. Verifique se a URL est√° correta e acess√≠vel publicamente. Se o erro persistir, contate o suporte.";

  // Chama a fun√ß√£o gen√©rica de execu√ß√£o.
  await _executeWelcomeCommandLogic({
    client,
    info,
    from,
    sender,
    text,
    expirationMessage,
    isGroup,
    isGroupAdmin,
    commandName,
    actionName,
    validationFn,
    processorFn: welcomeProcessor.setExitMedia, // Fun√ß√£o do processador para definir a m√≠dia de sa√≠da
    successMessageFn,
    errorMessageText,
  });
}

/**
 * @module welcomeCommands
 * Exporta as fun√ß√µes handler para cada comando relacionado √†s mensagens de boas-vindas/sa√≠da.
 * Estas fun√ß√µes s√£o destinadas a serem chamadas pelo controlador principal do bot
 * quando um comando correspondente for detectado.
 */
module.exports = {
  /** @see handleWelcomeToggleCommand */
  handleWelcomeToggleCommand,
  /** @see handleSetWelcomeMessageCommand */
  handleSetWelcomeMessageCommand,
  /** @see handleSetWelcomeMediaCommand */
  handleSetWelcomeMediaCommand,
  /** @see handleSetExitMessageCommand */
  handleSetExitMessageCommand,
  /** @see handleSetExitMediaCommand */
  handleSetExitMediaCommand,
};
